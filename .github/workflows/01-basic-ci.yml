name: "CI Pipeline Completa (N√≠vel 1 e 2)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Vari√°veis de ambiente globais, dispon√≠veis para todos os jobs
env:
  NODE_VERSION: '18'
  COVERAGE_MIN: 80 # Cobertura m√≠nima de testes exigida

jobs:
  # --- IN√çCIO DOS JOBS DO N√çVEL 1 ---
  basic-setup:
    name: "N√≠vel 1: Setup & Basic Checks"
    runs-on: ubuntu-latest
    
    outputs:
      node-version: ${{ steps.setup.outputs.node-version }}
      challenge-status: ${{ steps.challenge.outputs.status }}
    
    steps:
      - name: "Checkout do c√≥digo"
        uses: actions/checkout@v4
        
      - name: "Setup Node.js"
        id: setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: "Informa√ß√µes do ambiente"
        run: |
          echo "Runner: ${{ runner.os }}"
          echo "Node.js: $(node --version)"
          echo "NPM: $(npm --version)"
          echo "Challenge: ${{ env.CHALLENGE_NAME }}"
          echo "Data: $(date)"
          
      - name: "Instalar depend√™ncias"
        run: |
          echo "Instalando depend√™ncias..."
          npm ci
          echo "Depend√™ncias instaladas com sucesso!"
          
      - name: "Verificar estrutura do projeto"
        run: |
          echo "Verificando estrutura do projeto..."
          ls -la
          echo ""
          echo "Arquivos principais encontrados:"
          [ -f "package.json" ] && echo "package.json"
          [ -f "server.js" ] && echo "server.js"
          [ -f "server.test.js" ] && echo "server.test.js"
          [ -d "public" ] && echo "diret√≥rio public/"
          [ -d ".github/workflows" ] && echo "workflows configurados"
          
      - name: "Challenge Status"
        id: challenge
        run: |
          echo "Parab√©ns! Voc√™ executou seu primeiro GitHub Action!"
          echo "Status: INICIADO"
          echo "Pr√≥ximo passo: Execute os testes automatizados"
          echo "status=started" >> $GITHUB_OUTPUT
          
  build:
    name: "N√≠vel 1: Build da Aplica√ß√£o"
    runs-on: ubuntu-latest
    needs: basic-setup
    
    steps:
      - name: "Checkout do c√≥digo"
        uses: actions/checkout@v4
        
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.basic-setup.outputs.node-version }}
          cache: 'npm'
          
      - name: "Instalar depend√™ncias"
        run: npm ci
        
      - name: "Build da aplica√ß√£o"
        run: |
          echo "Iniciando build..."
          npm run build
          echo "Build conclu√≠do com sucesso!"
          
      - name: "Estat√≠sticas do build"
        run: |
          echo "Estat√≠sticas do build:"
          echo "Tamanho do projeto: $(du -sh . | cut -f1)"
          echo "Arquivos: $(find . -type f | wc -l)"
          
  health-check:
    name: "N√≠vel 1: Health Check"
    runs-on: ubuntu-latest
    needs: [basic-setup, build]
    
    steps:
      - name: "Checkout do c√≥digo"
        uses: actions/checkout@v4
        
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: "Instalar depend√™ncias"
        run: npm ci
        
      - name: "Iniciar servidor em background"
        run: |
          echo "Iniciando servidor..."
          npm start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 10
          
      - name: "Verificar health endpoint"
        run: |
          echo "Verificando health check..."
          curl -f http://localhost:3000/health || exit 1
          echo "Health check passou!"
          
      - name: "Parar servidor"
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          
  challenge-complete:
    name: "N√≠vel 1: Desafio Conclu√≠do!"
    runs-on: ubuntu-latest
    needs: [basic-setup, build, health-check]
    if: success()
    
    steps:
      - name: "Parab√©ns!"
        run: |
          echo "PARAB√âNS! Voc√™ concluiu o N√≠vel 1!"
          echo ""
          echo "O que voc√™ aprendeu:"
          echo "   ‚Ä¢ Como criar um workflow b√°sico"
          echo "   ‚Ä¢ Usar actions do marketplace (checkout, setup-node)"
          echo "   ‚Ä¢ Definir jobs e steps"
          echo "   ‚Ä¢ Usar vari√°veis de ambiente"
          echo "   ‚Ä¢ Fazer build e health check"
          echo ""
          echo "Badge desbloqueado: First Steps üöÄ"
          echo "Pr√≥ximo desafio: N√≠vel 2 - Testing Master"
          echo ""
          echo "Veja seu progresso em: https://github.com/${{ github.repository }}/actions"
          
      - name: "Atualizar estat√≠sticas"
        run: |
          echo "Atualizando estat√≠sticas do desafio..."
          echo "Challenge: ${{ env.CHALLENGE_NAME }}"
          echo "Status: CONCLU√çDO"
          echo "Data: $(date)"
          echo "Usu√°rio: ${{ github.actor }}"
          
      - name: "Gerar certificado"
        run: |
          mkdir -p certificates
          cat > certificates/level-1-certificate.md << EOF
          # Certificado de Conclus√£o - N√≠vel 1
          
          **Descomplicando Github Actions - GitHub Actions Edition**
          
          ---
          
          Este certificado atesta que **${{ github.actor }}** concluiu com sucesso:
          
          ## N√≠vel 1: Primeiro Contato
          
          **Compet√™ncias desenvolvidas:**
          - Configura√ß√£o de workflow b√°sico
          - Uso de actions do marketplace
          - Defini√ß√£o de jobs e steps
          - Vari√°veis de ambiente
          - Build e health check automatizados
          
          **Data de conclus√£o:** $(date)
          **Reposit√≥rio:** ${{ github.repository }}
          **Workflow:** ${{ github.run_id }}
          
          ---
          
          **Badge conquistado:** First Steps
          
          **Pr√≥ximo desafio:** N√≠vel 2 - Testing Master
          
          ---
          
          *Certificado gerado automaticamente pelo GitHub Actions*
          *LINUXtips*
          EOF
          
      - name: "Upload do certificado"
        uses: actions/upload-artifact@v4
        with:
          name: level-1-certificate
          path: certificates/
          retention-days: 30
          
      - name: "Notificar aplica√ß√£o sobre conclus√£o"
        run: |
          echo "Notificando aplica√ß√£o sobre a conclus√£o do workflow..."
          
          # Tentar notificar a aplica√ß√£o local (se estiver rodando)
          curl -X POST "http://localhost:3000/api/workflow-complete" \
            -H "Content-Type: application/json" \
            -d '{
              "username": "${{ github.actor }}",
              "repository": "${{ github.event.repository.name }}",
              "workflowName": "${{ github.workflow }}",
              "runId": "${{ github.run_id }}",
              "certificateGenerated": true
            }' || echo "Aplica√ß√£o local n√£o encontrada (normal em ambiente de produ√ß√£o)"
          
          echo "Workflow conclu√≠do com sucesso!"
          echo "Badge ser√° desbloqueado automaticamente se a aplica√ß√£o estiver rodando"

  # --- IN√çCIO DOS JOBS DO N√çVEL 2 ---
  # Estes jobs s√≥ executar√£o ap√≥s a conclus√£o bem-sucedida do N√≠vel 1.

  tests-and-coverage:
    name: "N√≠vel 2: Testes e Cobertura"
    runs-on: ubuntu-latest
    # A diretiva 'needs' garante que este job s√≥ inicie ap√≥s o 'challenge-complete' (e todos os seus dependentes) terminar com sucesso.
    needs: challenge-complete
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}

    steps:
      - name: "Checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Instalar depend√™ncias"
        run: npm ci

      - name: "Executar testes com cobertura"
        id: run-tests
        run: npm test -- --coverage > test-summary.txt

      - name: "Extrair porcentagem de cobertura"
        id: coverage
        run: |
          # Extrai a linha, pega a 3¬™ coluna, remove o '%' e qualquer espa√ßo em branco
          COVERAGE=$(grep 'Statements' test-summary.txt | awk '{print $3}' | tr -d '[:space:]%')
          echo "Coverage: $COVERAGE%"
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: "Verificar cobertura m√≠nima"
        env:
          COVERAGE: ${{ steps.coverage.outputs.coverage }}
        run: |
          if (( $(echo "${{ env.COVERAGE }} < ${{ env.COVERAGE_MIN }}" | bc -l) )); then
            echo "Erro: Cobertura de testes de ${{ env.COVERAGE }}% √© menor que o m√≠nimo de ${{ env.COVERAGE_MIN }}%."
            exit 1
          fi
          echo "Cobertura de testes de ${{ env.COVERAGE }}% atingiu o m√≠nimo de ${{ env.COVERAGE_MIN }}%."

  challenge-2-complete:
      name: "N√≠vel 2: Desafio Conclu√≠do!"
      runs-on: ubuntu-latest
      # Este job depende da conclus√£o bem-sucedida do job de testes.
      needs: tests-and-coverage
      # A condi√ß√£o 'if' garante que o job s√≥ rode se o anterior foi um sucesso e se a cobertura foi extra√≠da.
      if: success() && needs.tests-and-coverage.outputs.coverage != ''

      steps:
        - name: "Gerar certificado N√≠vel 2"
          run: |
            mkdir -p certificates
            cat > certificates/level-2-certificate.md << EOF
            # Certificado de Conclus√£o - N√≠vel 2
            **Descomplicando Github Actions - GitHub Actions Edition**
            ---
            Este certificado atesta que **${{ github.actor }}** concluiu com sucesso o **N√≠vel 2: Testes Automatizados**.
            **Cobertura alcan√ßada:** >= ${{ env.COVERAGE_MIN }}%
            **Data de conclus√£o:** $(date)
            EOF
        - name: "Upload do certificado N√≠vel 2"
          uses: actions/upload-artifact@v4
          with:
            name: level-2-certificate
            path: certificates/
            retention-days: 30
